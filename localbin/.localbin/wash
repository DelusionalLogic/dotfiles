#!/bin/env lua
local colors = require "ansicolors"

io.write(colors([[%{bright}%{cyan}
     _____
    |_____|
   [ ~    :]    never give up;
   [ ( - ) ]    for even rivers someday wash dams away.
   |_______|

]]))


local http = require "socket.http"
local gumbo = require "gumbo"

local lpass = {
	cred = function(name)
		local p = io.popen(string.format("lpass show \"%s\"", name))
		local pass = {}
		for line in p:lines() do
			key, val = string.match(line, "(.+): (.+)")
			if not string.match(key, "^%u*$") then
				key = string.gsub(key, "^%A*(%a)", string.lower)
			end
			pass[key] = val
		end
		p:close()
		return pass
	end
}

function iter (state, i)
	i = i + 1
	if i > state.stop then
		return
	end
	local v = state.list[i]
	if v then
		return i, v
	end
end

function slicepairs(list, start, stop)
	if start == nil then start = 1 end
	return iter, {list=list, stop=stop}, start-1
end

local pass = lpass.cred("Miele Logic 8201.mieleturvask.dk")

local url = string.format("http://%s:%s@8201.mieleturvask.dk", pass.username, pass.password)

local body, code = http.request(url)

local root = gumbo.parse(body)
local tbl = root:getElementsByTagName("table")[3]

WASHER = "washer"
DRYER = "dryer"
function parse_type(mtype)
	if mtype == "PW 6080" or mtype == "PW 6065 Vario" then
		return WASHER
	elseif mtype == "PT 8203 SL WP" then
		return DRYER
	end
end

function parse_timeleft(text)
	return tonumber(string.match(text, "Resttid: (.+) min%."))
end

function parse_row(row)
	kind = parse_type(row.children[7].textContent)
	local this = {
		id = tonumber(row.children[2].textContent),
		state = "",
		reserved = "",
		kind = kind,
	}

	local stitle = row.children[10].attributes.title
	if not (stitle == nil) then
		local state, reserved = string.match(stitle.value, "(Ledig) indtil kl. (.*) %- ")
		this.state = state
		this.reserved = reserved
	end

	if not this.state then
		this.timeleft = parse_timeleft(stitle.value)
	end
	return this
end

washer = {}
dryer = {}
for i, row in ipairs(tbl:getElementsByTagName("tr")) do
	machine = parse_row(row)
	if not (machine == nil) then
		if machine.kind == WASHER then
			table.insert(washer, machine)
		elseif machine.kind == DRYER then
			table.insert(dryer, machine)
		end
	end
end

function print_machine(machine)
	io.write("Machine ")
	io.write(tostring(machine.id))
	io.write(" .......... ")

	local thisState = machine.state and string.format("Free (%s)", machine.reserved) or string.format("In Use (%s min)", machine.timeleft)
	local thisColor = machine.state and "green" or "red"
	io.write(colors(string.format("%%{%s}%s", thisColor, thisState)))
	io.write("\n")
end

function print_washer(machine)
	io.write("Machine ")
	io.write(tostring(machine.id))
	io.write(" .......... ")

	local thisState = machine.state and string.format("Free (%s)", machine.reserved) or "In Use"
	local thisColor = machine.state and "green" or "red"
	io.write(colors(string.format("%%{%s}%s", thisColor, thisState)))
	io.write("\n")
end

print(colors("%{blue}Washers"))
for k, v in ipairs(washer) do
	print_machine(v)
end

print()
print(colors("%{blue}Dryers"))
for k, v in ipairs(dryer) do
	print_washer(v)
end
